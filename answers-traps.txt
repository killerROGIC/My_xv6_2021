1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
	A：单printf的话，只用了a1和a2，其中a2保存13
	
2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
	A：编译器直接优化了，直接保存12在a1寄存器中，所以在 `26:` 那行
	
3. At what address is the function printf located?
  	A: 在0x630
        
4. What value is in the register ra just after the jalr to printf in main?
	printf返回main的地址，看下一步的起始地址就行了，0x38
        
5. Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
    
	A： 首先转化为16进制，57616 -> 0xe110;
	所以前半段就是he110；
    后半段因为是小端输出，所以地址转字符串需要从后往前读，即 72 6c 64 -> r l d；
    如果是大端的话，就是64 6c 72 -> d l r；
    综合输出 ： hell0 world
        
6. In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);
	A：原本需要两个参数，却只传入了一个，因此y=后面打印的结果取决于之前a2中保存的数据
